// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------
// 1) 試薬テーブル (Reagent)
// --------------------
model Reagent {
  id                     Int      @id @default(autoincrement())
  productNumber          String   @unique       // Firebaseのdoc名を移行
  currentLot             String?
  location               String?
  maxExpiry              DateTime?
  name                   String?
  noOrderOnZeroStock     Boolean  @default(false)
  orderDate              DateTime?
  orderQuantity          Int      @default(0)
  orderTriggerExpiry     Boolean  @default(false)
  orderTriggerStock      Int      @default(0)
  orderTriggerValueStock Int?
  orderValue             String?
  stock                  Int      @default(0)
  valueStock             Int      @default(0)

  // 例: データ作成日時、更新日時を持たせる
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Historyとの1対多関係 (Reagentが親)
  histories              History[]
}

// --------------------
// 2) 履歴テーブル (History)
// --------------------
model History {
  id            Int      @id @default(autoincrement())
  actionType    String
  date          DateTime
  lotNumber     String
  productNumber String      // Firebaseで格納していた値を保持
  user          String?   // [追加]
  oldStock      Int?      // [追加]
  newStock      Int?      // [追加]
  oldValueStock Int?      // [追加]
  newValueStock Int?      // [追加]

  // Reagentとの関係 (外部キー: reagentId) 
  // → productNumber自体でJOINするパターンも可能だが、よくあるRDB設計ではID参照が一般的
  reagentId     Int?
  reagent       Reagent?  @relation(fields: [reagentId], references: [id])

  // 作成日時、更新日時
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// --------------------
// 3) ユーザーテーブル (User)
// --------------------
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  email     String?  @unique
  emailVerified DateTime?

  // 作成日時、更新日時
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}